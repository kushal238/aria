import 'package:flutter/material.dart';
// Remove Firebase Core (Keep other necessary imports)
// import 'package:firebase_core/firebase_core.dart';
// Remove Firebase Options (Generated file no longer needed for init)
// import 'firebase_options.dart';

// Add Amplify Imports
import 'package:amplify_flutter/amplify_flutter.dart';
import 'package:amplify_auth_cognito/amplify_auth_cognito.dart';

// Import the Amplify Configuration file (Generated by Amplify CLI)
import 'amplifyconfiguration.dart';

// Import your screens and AuthWrapper
import 'screens/auth_screen.dart';
import 'screens/home_screen.dart';
// Assuming AuthWrapper is in main.dart or imported from elsewhere
// If AuthWrapper is not defined here, you need to import its file.

void main() async {
  // Ensure Flutter bindings are initialized first
  WidgetsFlutterBinding.ensureInitialized();

  // Comment out or remove Firebase Initialization
  // await Firebase.initializeApp(
  //   options: DefaultFirebaseOptions.currentPlatform,
  // );
  // print("Firebase Initialized!");

  // Configure and initialize Amplify
  try {
    await _configureAmplify();
    print("Amplify configured successfully!");
  } catch (e) {
    print("Error configuring Amplify: $e");
    // Consider showing an error message to the user
    // or handling the error appropriately.
  }

  // Run your Flutter app
  runApp(const MyApp());
}

// Helper function to configure Amplify
Future<void> _configureAmplify() async {
  try {
    // Create and add the Auth plugin (Cognito)
    final authPlugin = AmplifyAuthCognito();
    await Amplify.addPlugin(authPlugin);

    // Configure Amplify with the generated configuration string
    // 'amplifyconfig' is a string constant defined in amplifyconfiguration.dart
    await Amplify.configure(amplifyconfig);
  } on Exception catch (e) {
     print('Error configuring Amplify: $e');
     // Re-throw or handle configuration error
     rethrow;
  }
}


class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Health App',
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),
        useMaterial3: true,
      ),
      // Keep AuthWrapper as the home (we'll modify it next)
      home: const AuthWrapper(),
    );
  }
}

// AuthWrapper Widget (Keep as defined previously - we will modify its internal logic later)
class AuthWrapper extends StatefulWidget {
  const AuthWrapper({super.key});
  @override
  State<AuthWrapper> createState() => _AuthWrapperState();
}
class _AuthWrapperState extends State<AuthWrapper> {
  // ... (Keep existing AuthWrapper code for now) ...
  // We will modify _checkAuthStatus later to use Amplify instead of http calls
  @override
  void initState() {
    super.initState();
     WidgetsBinding.instance.addPostFrameCallback((_) {
       _checkAuthStatus(); // Keep this call for now
    });
  }

  Future<void> _checkAuthStatus() async {
     // TODO: Replace this later with Amplify session check
     print("AuthWrapper: _checkAuthStatus running (using old logic for now)...");
     await Future.delayed(const Duration(seconds: 1)); // Simulate check
     if (mounted) {
         print("AuthWrapper: Navigating to PhoneAuthScreen (default for now)");
          Navigator.pushReplacement(
            context,
            MaterialPageRoute(builder: (context) => const AuthScreen()),
          );
     }
  }

  @override
  Widget build(BuildContext context) {
    return const Scaffold(
      body: Center(
        child: CircularProgressIndicator(),
      ),
    );
  }
}